////////////////////////////////////////////////
// File:	Event.h
//
// Author:	Liam Russell (A.K.A. BitSlapper)
//
// Copyright:	2014-2015 Liam Russell
//
// License:	GNU GENERAL PUBLIC LICENSE V3
//////////////////////////////////////////////
#ifndef _EVENT_H_
#define _EVENT_H_

#include <string>
#include <map>

namespace Events
{
	class Event
	{
	private:

		std::string m_szEventName;
		std::map<std::string, void*> m_mapParams;

	public:

		///////////////////////////////////////////////////////////////////////////////
		//Constructor
		///////////////////////////////////////////////////////////////////////////////
		Event();

		///////////////////////////////////////////////////////////////////////////////
		//Copy Constructor
		///////////////////////////////////////////////////////////////////////////////
		Event(const Event& rEvent);

		///////////////////////////////////////////////////////////////////////////////
		//Assignment Operator
		///////////////////////////////////////////////////////////////////////////////
		Event& operator=(const Event& rEvent);

		///////////////////////////////////////////////////////////////////////////////
		//Destructor
		///////////////////////////////////////////////////////////////////////////////
		virtual ~Event();

		///////////////////////////////////////////////////////////////////////////////
		//Accessors
		///////////////////////////////////////////////////////////////////////////////
		const std::string& GetName()						const	{ return this->m_szEventName; }
		void* GetParam(const std::string szName)					{ return this->m_mapParams[szName]; }
		const std::map<std::string, void*> GetParameters()	const	{ return this->m_mapParams; }

		///////////////////////////////////////////////////////////////////////////////
		//Mutators
		///////////////////////////////////////////////////////////////////////////////
		void SetName(const std::string& szName)					{ this->m_szEventName = szName; }
		void AddParam(const std::string& szName, void* pParam)	{ this->m_mapParams[szName] = pParam; }
	};
}

#endif //_EVENT_H_